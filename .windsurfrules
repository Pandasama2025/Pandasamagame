# AI编程助手（Windsurf）本地规则/指导原则 - [你的奇幻小说名称] Pygame原型

## 1. 基本技术栈与环境 (Core Tech Stack & Environment)

* **语言:** Python 3 (请使用 Python 3.9 或更高版本语法)。
* **核心库:** Pygame。代码应主要依赖 Pygame 提供的API来处理图形、事件、输入、时间和声音（如果涉及）。
* **目标:** 构建一个**垂直切片原型 (Vertical Slice Prototype)**，优先实现核心功能，保持代码简洁、可读。
* **避免:** 在没有明确要求的情况下，避免引入除 Pygame 之外的大型第三方库或复杂框架。

## 2. 代码风格与规范 (Coding Style & Conventions)

* **遵循 PEP 8:** 这是标准的Python代码风格指南。请确保生成的代码符合PEP 8规范（命名、缩进、行长等）。
* **使用类型提示 (Type Hinting):** 尽可能为函数参数、返回值和重要变量添加类型提示，以提高代码清晰度和可维护性。
* **命名:** 使用清晰、描述性的变量名、函数名和类名（建议使用英文）。
    * 类名使用 `CamelCase`。
    * 函数名和变量名使用 `snake_case`。
    * 常量名使用 `ALL_CAPS_SNAKE_CASE`。
* **注释与文档字符串:**
    * 对于复杂的逻辑或不明显的代码，请添加必要的行内注释。
    * 为重要的函数和类编写简洁明了的文档字符串 (Docstrings)，说明其用途、参数和返回值。
* **函数长度:** 尽量保持函数短小精悍，专注于单一功能。

## 3. 项目结构与架构 (Project Structure & Architecture)

* **模块化:** 将代码按功能组织到不同的 `.py` 文件（模块）中。建议结构：
    * `main.py`: 程序入口，包含主游戏循环。
    * `settings.py`: 存放全局常量（屏幕尺寸、颜色、帧率等）。
    * `entities.py`: 定义游戏实体类（如 `Player`, `Enemy`, `Ally`, `Summon`）。
    * `skills.py`: 定义技能类和技能效果逻辑。
    * `items.py`: (如果原型需要) 定义物品类。
    * `gamelogic.py` / `combat.py`: 包含核心战斗逻辑、冷却系统、伤害计算等。
    * `scenes.py` / `states.py`: 实现不同的游戏场景/状态（如 `NarrativeScene`, `CombatScene`），采用**简单的状态机模式**进行管理。
    * `ui.py`: 包含简单的UI元素类（如 `Button`, `HealthBar`, `TextBox`）。
    * `assets.py` / `loader.py`: (可选) 用于加载和管理图片、字体等资源的辅助模块。
* **面向对象编程 (OOP):** 优先使用类来封装数据和行为（例如，角色、技能、场景都应是类）。

## 4. 核心游戏机制上下文 (Key Game Mechanics Context)

* **战斗系统:** 基于**冷却时间的半自动战斗**。
    * 单位有 `speed` 属性影响**自动攻击**的冷却时间（参考PRD中的公式）。
    * **技能**有固定的独立冷却时间，不受 `speed` 影响。
    * 玩家**手动释放技能**会触发短暂的**公共冷却时间 (GCD)**。
    * 包含**召唤 (Summoning)** 机制：玩家可召唤盟友加入战斗，盟友有简单AI（自动攻击）。
* **叙事系统:** 通过Pygame绘制文本和图片（背景、立绘）。包含简单的**分支选项**（通过按钮点击）。
* **RPG元素 (原型简化版):** 包含基础的角色属性 (HP, MP, Speed, Attack, Defense)。可能包含极简的经验获取提示，但无需完整升级系统。
* **UI元素:** 需要绘制文本框、滚动战斗日志区域、HP条、简单的技能按钮。交互主要通过**鼠标点击**。

## 5. 其他注意事项 (Miscellaneous)

* **错误处理:** 添加基础的文件加载等I/O操作的错误处理（如 `try-except`），但避免过度复杂的异常处理。
* **性能:** 对于原型，代码清晰度和功能正确性优先于极致的性能优化。但避免明显的性能陷阱（如在主循环中反复加载资源）。
* **资源路径:** 使用相对路径处理资源文件（图片、字体等），考虑使用 `os.path` 来确保跨平台兼容性。

---

**如何使用这些规则:**

你需要查阅你使用的 "Windsurf" 工具的文档，了解它如何接受自定义指令或上下文。你可能需要：

* 将这些点复制粘贴到它的配置区域。
* 在你的代码文件的开头用特殊注释格式包含这些信息。
* 在与它交互时，在你的提示（Prompt）中明确提到这些关键点。

例如，当你要求它生成一个战斗相关的函数时，你可以提示：“请使用Python 3.9+和Pygame，根据我们定义的冷却系统规则（速度影响自动攻击，技能冷却固定，有GCD），为Character类编写一个处理受到伤害的方法，并更新HP。确保遵循PEP 8和使用类型提示。”

希望这份针对性的指导原则能帮助你的AI编程助手更好地协助你开发这个Pygame原型！
